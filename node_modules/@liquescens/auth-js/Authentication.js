export class Authentication
{
    /**
     * @param {string} client_id 
     * @param {string} host 
     */
    constructor(client_id, host)
    {
        this.client_id = client_id;
        this.host = host;
        this.redirect_uri = `${host}/auth`;
    }

    /**
     * @returns {Promise<{ client: Client, session: Session[], identities: AccountIdentity[], accounts: Account }>}
     */
    async getClientInfo()
    {
        const response = await fetch(`${this.host}/client`, { credentials: 'include' });
        return await response.json();
    }

    /**
     * @param {string} session_id
     */
    async signOut(session_id)
    {
        const response = await fetch(`${this.host}/session`, { method: 'DELETE', credentials: 'include', body: session_id });
        if (response.status !== 200) throw new Error('TODO');
    }

    /**
     * @param {string} session_id
     */
    async setActiveSession(session_id)
    {
        const response = await fetch(`${this.host}/session`, { method: 'PUT', credentials: 'include', body: session_id });
        if (response.status !== 200) throw new Error('TODO');
    }
}